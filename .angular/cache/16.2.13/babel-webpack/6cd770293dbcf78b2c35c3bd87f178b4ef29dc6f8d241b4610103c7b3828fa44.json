{"ast":null,"code":"import { EMPTY } from 'rxjs';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst headers = new HttpHeaders().set('Accept', 'application/json');\nexport class CoproprietaireService {\n  constructor(http) {\n    this.http = http;\n    this.coproprietaireList = [];\n    this.api = 'http://localhost:4500/coproprietaires';\n  }\n  findById(id) {\n    const url = `${this.api}/${id}`;\n    const params = {\n      id: id\n    };\n    return this.http.get(url, {\n      params,\n      headers\n    });\n  }\n  load(filter) {\n    this.find(filter).subscribe({\n      next: result => {\n        this.coproprietaireList = result;\n      },\n      error: err => {\n        console.error('error loading', err);\n      }\n    });\n  }\n  getList() {\n    return this.http.get(this.api);\n  }\n  find(filter) {\n    const params = {};\n    return this.http.get(this.api, {\n      params,\n      headers\n    });\n  }\n  save(entity) {\n    let params = new HttpParams();\n    let url = '';\n    if (entity.id) {\n      url = `${this.api}/${entity.id.toString()}`;\n      params = new HttpParams().set('ID', entity.id.toString());\n      return this.http.put(url, entity, {\n        headers,\n        params\n      });\n    } else {\n      url = `${this.api}`;\n      return this.http.post(url, entity, {\n        headers,\n        params\n      });\n    }\n  }\n  delete(entity) {\n    let params = new HttpParams();\n    let url = '';\n    if (entity.id) {\n      url = `${this.api}/${entity.id.toString()}`;\n      params = new HttpParams().set('ID', entity.id.toString());\n      return this.http.delete(url, {\n        headers,\n        params\n      });\n    }\n    return EMPTY;\n  }\n  static #_ = this.ɵfac = function CoproprietaireService_Factory(t) {\n    return new (t || CoproprietaireService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CoproprietaireService,\n    factory: CoproprietaireService.ɵfac\n  });\n}","map":{"version":3,"names":["EMPTY","HttpHeaders","HttpParams","headers","set","CoproprietaireService","constructor","http","coproprietaireList","api","findById","id","url","params","get","load","filter","find","subscribe","next","result","error","err","console","getList","save","entity","toString","put","post","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac"],"sources":["C:\\Users\\zeina\\angular-crud\\demo\\src\\app\\coproprietaire\\coproprietaire.service.ts"],"sourcesContent":["import { Coproprietaire } from './coproprietaire';\nimport { CoproprietaireFilter } from './coproprietaire-filter';\nimport { Injectable } from '@angular/core';\nimport { EMPTY, Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\n\nconst headers = new HttpHeaders().set('Accept', 'application/json');\n\n@Injectable()\nexport class CoproprietaireService {\n  coproprietaireList: Coproprietaire[] = [];\n  api = 'http://localhost:4500/coproprietaires';\n\n  constructor(private http: HttpClient) {\n  }\n\n  findById(id: string): Observable<Coproprietaire> {\n    const url = `${this.api}/${id}`;\n    const params = { id: id };\n    return this.http.get<Coproprietaire>(url, {params, headers});\n  }\n\n  load(filter: CoproprietaireFilter): void {\n    this.find(filter).subscribe({\n      next: result => {\n        this.coproprietaireList = result;\n      },\n      error: err => {\n        console.error('error loading', err);\n      }\n    });\n  }\n\n  getList(): Observable<any> {\n    return this.http.get<Coproprietaire[]>(this.api);\n  }\n\n  find(filter: CoproprietaireFilter): Observable<Coproprietaire[]> {\n    const params = {\n    };\n\n    return this.http.get<Coproprietaire[]>(this.api, {params, headers});\n  }\n\n  save(entity: any): Observable<Coproprietaire> {\n    let params = new HttpParams();\n    let url = '';\n    if (entity.id) {\n      url = `${this.api}/${entity.id.toString()}`;\n      params = new HttpParams().set('ID', entity.id.toString());\n      return this.http.put<Coproprietaire>(url, entity, {headers, params});\n    } else {\n      url = `${this.api}`;\n      return this.http.post<Coproprietaire>(url, entity, {headers, params});\n    }\n  }\n\n  delete(entity: Coproprietaire): Observable<Coproprietaire> {\n    let params = new HttpParams();\n    let url = '';\n    if (entity.id) {\n      url = `${this.api}/${entity.id.toString()}`;\n      params = new HttpParams().set('ID', entity.id.toString());\n      return this.http.delete<Coproprietaire>(url, {headers, params});\n    }\n    return EMPTY;\n  }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}